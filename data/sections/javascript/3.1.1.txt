3.1.1. Functions as first-class objects
Functions in JavaScript possess all the capabilities of objects and are thus treated like any other object in the language. We say that functions are first-class objects, which can also be
Created via literals
function ninjaFunction() {}
Assigned to variables, array entries, and properties of other objects
var ninjaFunction = function() {};
#A
ninjaArray.push(function(){});
#B
ninja.data = function(){};
#C
#A - Assigns a new function to a variable
#B - Adds a new function to an array
#C - Assigns a new function as a property of another object
!@%STYLE%@!
{"css":"{\"css\": \"font-weight: bold;\"}","target":"[]"}
!@%STYLE%@!
Passed as arguments to other functions
function call(ninjaFunction){
ninjaFunction();
}
call(function(){});
#A
#A - A newly created function passed as an argument to a function
!@%STYLE%@!
{"css":"{\"css\": \"font-weight: bold;\"}","target":"[[{\"line\":5,\"ch\":0},{\"line\":5,\"ch\":65}]]"}
!@%STYLE%@!
Returned as values from functions
function returnNewNinjaFunction() {
return function(){};
#A
}
#A - Returns a new function
!@%STYLE%@!
{"css":"{\"css\": \"font-weight: bold;\"}","target":"[[{\"line\":4,\"ch\":0},{\"line\":4,\"ch\":27}]]"}
!@%STYLE%@!
They can possess properties that can be dynamically created and assigned:
var ninjaFunction = function(){};
ninjaFunction.name = "Hanzo";
#A
#A - Adds a new property to a function
!@%STYLE%@!
{"css":"{\"css\": \"font-weight: bold;\"}","target":"[[{\"line\":3,\"ch\":0},{\"line\":3,\"ch\":38}]]"}
!@%STYLE%@!
Whatever we can do with objects, we can do with functions as well. Functions are objects, just with an additional, special capability of being invokable: Functions can be called or invoked in order to perform an action.
Functional programming in JavaScript
Having functions as first-class objects is the first step toward functional programming, a style of programming that’s focused on solving problems by composing functions (instead of specifying sequences of steps, as in more mainstream, imperative programming). Functional programming can help us write code that’s easier to test, extend, and modularize. But it’s a big topic, and in this book we only give it a nod (for example, in chapter 9). If you’re interested in learning how to take advantage of functional programming concepts and apply them to your JavaScript programs, we recommend Functional Programming in JavaScript by Luis Atencio (Manning, 2016), available at www.manning.com/books/functional-programming-in-javascript.
One of the characteristics of first-class objects is that they can be passed to functions as arguments. In the case of functions, this means that we pass a function as an argument to another function that might, at a later point in application execution, call the passed-in function. This is an example of a more general concept known as a callback function. Let’s explore this important concept.
