8.1.1. Defining getters and setters
In JavaScript, getter and setter methods can be defined in two ways:
By specifying them within object literals or within ES6 class definitions
By using the built-in Object.defineProperty method
Explicit support for getters and setters has existed for quite some time now, since the days of ES5. As always, let’s explore the syntax through an example. In this case, we have an object storing a list of ninjas, and we want to be able to get and set the first ninja in the list.
Listing 8.2. Defining getters and setters in object literals
const ninjaCollection = {
ninjas: ["Yoshi", "Kuma", "Hattori"],
get firstNinja(){
#A
report("Getting firstNinja");
#A
return this.ninjas[0];
#A
},
#A
set firstNinja(value){
#B
report("Setting firstNinja");
#B
this.ninjas[0] = value;
#B
}
#B
};
assert(ninjaCollection.firstNinja === "Yoshi",
#C
"Yoshi is the first ninja");
#C
ninjaCollection.firstNinja = "Hachi";
#D
assert(ninjaCollection.firstNinja === "Hachi"
#E
&& ninjaCollection.ninjas[0] ===
"Hachi",
#E
"Now Hachi is the first ninja");
#E
#A - Defines a getter method for the firstNinja property that returns the first ninja in our collection and logs a message
#B - Defines a setter method for the firstNinja property that modifies the first ninja in our collection and logs a message
#C - Accesses the firstNinja property as if it were a standard object property
#D - Modifies the firstNinja property as if it were a standard object property
#E - Tests that the property modification is stored
!@%STYLE%@!
{"css":"{\"css\": \"font-weight: bold;\"}","target":"[[{\"line\":2,\"ch\":2},{\"line\":2,\"ch\":19}],[{\"line\":2,\"ch\":49},{\"line\":2,\"ch\":51}],[{\"line\":3,\"ch\":49},{\"line\":3,\"ch\":51}],[{\"line\":4,\"ch\":49},{\"line\":4,\"ch\":51}],[{\"line\":5,\"ch\":49},{\"line\":5,\"ch\":51}],[{\"line\":21,\"ch\":0},{\"line\":21,\"ch\":2}],[{\"line\":6,\"ch\":49},{\"line\":6,\"ch\":51}],[{\"line\":7,\"ch\":49},{\"line\":7,\"ch\":51}],[{\"line\":8,\"ch\":49},{\"line\":8,\"ch\":51}],[{\"line\":9,\"ch\":49},{\"line\":9,\"ch\":51}],[{\"line\":22,\"ch\":0},{\"line\":22,\"ch\":2}]]"}
!@%STYLE%@!
This example defines a ninjaCollection object that has a standard property, ninjas, which references an array of ninjas, and a getter and a setter for the property firstNinja. The general syntax for getters and setters is shown in figure 8.1.
Figure 8.1. The syntax for defining getters and setters. Prefix the property name with either the get or the set keyword.
As you can see, we define a getter property by prefixing the name with a get keyword, and a setter property with a set keyword.
In listing 8.2, both the getter and the setter log a message. In addition, the getter returns the value of the ninja at index 0, and the setter assigns a new value to the ninja at the same index:
get firstNinja(){
report("Getting firstNinja");
return this.ninjas[0];
},
set firstNinja(value){
report("Setting firstNinja");
this.ninjas[0] = value;
}
Next, we test that accessing the getter property returns the first ninja, Yoshi:
assert(ninjaCollection.firstNinja === "Yoshi",
"Yoshi is the first ninja");
Notice that the getter property is accessed as if it were a standard object property (and not as the method that it is).
After we access a getter property, the associated getter method is implicitly called, the message Getting firstNinja is logged, and the value of the ninja at index 0 is returned.
We continue by taking advantage of our setter method, and writing to the firstNinja property, again, just as we would assign a new value to a normal object property:
ninjaCollection.firstNinja = "Hachi";
Similar to the previous case, because the firstNinja property has a setter method, whenever we assign a value to that property, the setter method is implicitly called. This logs the message Setting firstNinja and modifies the value of the ninja at index 0.
Finally, we can test that our modification has done the work and that the new value of the ninja at index 0 can be accessed both through the ninjas collection and through our getter method:
assert(ninjaCollection.firstNinja === "Hachi"
&& ninjaCollection.ninjas[0] ===
"Hachi",
"Now Hachi is the first ninja");
Figure 8.2 shows the output generated by listing 8.2. When we access a property with a getter (for example, through ninjaCollection.firstNinja), the getter method is immediately called, and in this case, the message Getting firstNinja is logged. Later, we test that the output is Yoshi and that the message Yoshi is the first ninja is logged. We proceed similarly by assigning a new value to the firstNinja property, and as we can see in the output, this implicitly triggers the execution of the setter method, which outputs the message Setting firstNinja.
Figure 8.2. The output from listing 8.2: if a property has a getter and a setter method, the getter method is implicitly called whenever we read the property value, and the setter method is called whenever we assign a new value to the property.
An important point to take from all this is that native getters and setters allow us to specify properties that are accessed as standard properties, but that are methods whose execution is triggered immediately when the property is accessed. This is further emphasized in figure 8.3.
Figure 8.3. Accessing a property with a getter method implicitly calls the matching getter. The process is the same as if this were a standard method call, and the getter method gets executed. A similar thing happens when we assign a value to a property through a setter method.
This syntax for defining a getter and a setter is straightforward, so it’s no wonder that we can use the exact same syntax to define getters and setters in other situations. The following example uses ES6 classes.
Listing 8.3. Using getters and setters with ES6 classes
class NinjaCollection {
constructor(){
this.ninjas = ["Yoshi", "Kuma", "Hattori"];
}
get firstNinja(){
#A
report("Getting firstNinja");
#A
return this.ninjas[0];
#A
}
#A
set firstNinja(value){
#A
report("Setting firstNinja");
#A
this.ninjas[0] = value;
#A
}
}
const ninjaCollection = new NinjaCollection();
assert(ninjaCollection.firstNinja === "Yoshi",
"Yoshi is the first ninja");
ninjaCollection.firstNinja = "Hachi";
assert(ninjaCollection.firstNinja === "Hachi"
&& ninjaCollection.ninjas[0] ===
"Hachi",
"Now Hachi is the first ninja");
#A - Defines a getter and a setter within an ES6 class
!@%STYLE%@!
{"css":"{\"css\": \"font-weight: bold;\"}","target":"[[{\"line\":24,\"ch\":0},{\"line\":24,\"ch\":54}]]"}
!@%STYLE%@!
This modifies the code from listing 8.2 to include ES6 classes. We keep all the tests to verify that the example still works as expected.
Note
We don’t always have to define both a getter and a setter for a given property. For example, often we’ll want to provide only a getter. If in that case we still attempt to write a value to that property, the exact behavior depends on whether the code is in strict or nonstrict mode. If the code is in nonstrict mode, assigning a value to a property with only a getter achieves nothing; the JavaScript engine will silently ignore our request. If, on the other hand, the code is in strict mode, the JavaScript engine will throw a type error, indicating that we’re trying to assign a value to a property that has a getter but no setter.
Although specifying getters and setters through ES6 classes and object literals is easy, you’ve probably noticed something missing. Traditionally, getters and setters are used to control access to private object properties, as in listing 8.1. Unfortunately, as we already know from chapter 5, JavaScript doesn’t have private object properties. Instead, we can mimic them through closures, by defining variables and specifying object methods that will close over those variables. Because with object literals and classes our getter and setter methods aren’t created within the same function scope as variables that we could use for private object properties, we can’t do this. Luckily, there’s an alternative way, through the Object.defineProperty method.
In chapter 7, you saw that the Object.defineProperty method can be used to define new properties by passing in a property descriptor object. Among other things, the property descriptor can include a get and a set property that define the property’s getter and setter methods.
We’ll use this feature to modify listing 8.1 to implement built-in getters and setters that control access to a “private” object property, as shown in the following listing.
Listing 8.4. Defining getters and setters with Object.defineProperty
function Ninja() {
#A
let _skillLevel = 0;
#B
Object.defineProperty(this, 'skillLevel', {
#C
get: () => {
#D
report("The get method is called");
#D
return _skillLevel;
#D
},
#D
set: value => {
#E
report("The set method is called");
#E
_skillLevel = value;
#E
}
#E
});
}
const ninja = new Ninja();
#F
assert(typeof ninja._skillLevel === "undefined",
#G
"We cannot access a 'private' property");
#G
assert(ninja.skillLevel === 0, "The getter works fine!");
#G
ninja.skillLevel = 10;
#H
assert(ninja.skillLevel === 10, "The value was updated");
#H
#A - Defines a constructor function
#B - Defines a “private” variable that will be accessible through function closures
#C - Uses the built-in Object.defineProperty to define a skillLevel property
#D - A get method that will be called whenever we read the skillLevel property
#E - A set method that will be called whenever we assign a value to the skillLevel property.
#F - Creates a new Ninja instance
#G - The private variable isn’t accessible directly, but through the skillLevel getter.
#H - The set method is implicitly called when assigning to the skillLevel property.
!@%STYLE%@!
{"css":"{\"css\": \"font-weight: bold;\"}","target":"[[{\"line\":19,\"ch\":9},{\"line\":19,\"ch\":25}],[{\"line\":21,\"ch\":2},{\"line\":21,\"ch\":18}],[{\"line\":22,\"ch\":9},{\"line\":22,\"ch\":25}],[{\"line\":21,\"ch\":2},{\"line\":21,\"ch\":23}],[{\"line\":19,\"ch\":9},{\"line\":19,\"ch\":25}],[{\"line\":21,\"ch\":2},{\"line\":21,\"ch\":18}],[{\"line\":22,\"ch\":9},{\"line\":22,\"ch\":25}]]"}
!@%STYLE%@!
In this example, we first define a Ninja constructor function with a _skillLevel variable that we’ll use as a private variable, just as in listing 8.1.
Next, on the newly created object, referenced by the this keyword, we define a skillLevel property by using the built-in Object.defineProperty method:
Object.defineProperty(this, 'skillLevel', {
get: () => {
report("The get method is called");
return _skillLevel;
},
set: value => {
report("The set method is called");
_skillLevel = value;
}
});
Because we want the skillLevel property to control access to a private variable, we specify a get and a set method that will be called whenever the property is accessed.
Notice that, unlike getters and setters specified on object literals and classes, the get and set methods defined through Object.defineProperty are created in the same scope as the “private” skillLevel variable. Both methods create a closure around the private variable, and we can access that private variable only through these two methods.
The rest of the code works exactly as in the previous examples. We create a new Ninja instance and check that we can’t access the private variable directly. Instead, all interactions have to go through the getter and setter, which we now use just as if they were standard object properties:
ninja.skillLevel === 0
#A
ninja.skillLevel = 10
#B
#A - Activates the getter method
#B - Activates the setter method
!@%STYLE%@!
{"css":"{\"css\": \"font-weight: bold;\"}","target":"[]"}
!@%STYLE%@!
As you can see, the approach with Object.defineProperty is more verbose and complicated than getters and setters in object literals and classes. But in certain cases, when we need private object properties, it’s well worth it.
Regardless of the way we define them, getters and setters allow us to define object properties that are used like standard object properties, but are methods that can execute additional code whenever we read or write to a particular property. This is an incredibly useful feature that enables us to perform logging, validate assignment values, and even notify other parts of the code when certain changes occur. Let’s explore some of these applications.
