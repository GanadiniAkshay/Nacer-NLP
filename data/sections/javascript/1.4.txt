1.4. Boosting skill transferability
When Bob was first learning web development, each browser had its own way of interpreting script and UI styles, preaching that their way was the best way and making every developer grind their teeth in frustration. Fortunately, the browser wars ended with HTML, CSS, the DOM API, and JavaScript all being standardized, and developer focus turning toward effective cross-browser JavaScript applications. Indeed, this focus on treating websites as applications led to many ideas, tools, and techniques crossing over from desktop applications to web applications. And now, that knowledge and tools transfer has happened again as ideas, tools, and techniques that originated in client-side web development have also permeated other application domains.
Achieving a deep understanding of fundamental JavaScript principles with the knowledge of core APIs can therefore make you a more versatile developer. By using the browsers and Node.js (an environment derived from the browser), you can develop almost any type of application imaginable:
Desktop applications, by using, for example, NW.js (http://nwjs.io/) or Electron (http://electron.atom.io/). These technologies usually wrap the browser so that we can build desktop UIs with standard HTML, CSS, and JavaScript (that way, we can rely on our core JavaScript and browser knowledge), with additional support that makes it possible to interact with the filesystem. We can build truly platform-independent desktop applications that have the same look and feel on Windows, Mac, and Linux.
Mobile apps with frameworks, such as Apache Cordova (https://cordova.apache.org/). Similar to desktop apps built with web technologies, frameworks for mobile apps use a wrapped browser but with additional platform-specific APIs that let us interact with the mobile platform.
Server-side applications and applications for embedded devices with Node.js, an environment derived from the browser that uses many of the same underlying principles as the browser. For example, Node.js executes JavaScript code and relies on events.
Ann doesn’t know how lucky she is (although Bob has a pretty good idea). It doesn’t matter whether she needs to build a standard desktop application, a mobile application, a server-side application, or even an embedded application—all these types of applications share some of the same underlying principles of standard client-side web applications. By understanding how the core mechanics of JavaScript work, and by understanding the core APIs provided by browsers (such as events, which also have a lot in common with mechanisms provided by Node.js), she can boost her development skills across the board. As can you. In the process, you’ll become a more versatile developer and gain the knowledge and understanding to tackle a wide variety of problems. You’ll even be able to build your own serverless applications based in the cloud by using JavaScript APIs for services such as AWS Lambda to deploy, maintain, and control your application’s cloud components.
