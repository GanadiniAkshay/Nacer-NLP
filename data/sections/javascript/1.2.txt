1.2. Understanding the browser
These days, JavaScript applications can be executed in many environments. But the environment from which it all began, the environment from which all other environments have taken ideas, and the environment on which we’ll focus, is the browser. The browser provides various concepts and APIs to thoroughly explore; see figure 1.1.
Figure 1.1. Client-side web applications rely on the infrastructure provided by the browser. We’ll particularly focus on the DOM, events, timers, and browser APIs.
We’ll concentrate on the following:
The Document Object Model (DOM)— The DOM is a structured representation of the UI of a client-side web application that is, at least initially, built from the HTML code of a web application. To develop great applications, you need to not only have a deep understanding of the core JavaScript mechanics, but also study how the DOM is constructed (chapter 2) and how to write effective code that manipulates the DOM (chapter 12). This will put the creation of advanced, highly dynamic UIs at your fingertips.
Events— A huge majority of JavaScript applications are event-driven applications, meaning that most of the code is executed in the context of a response to a particular event. Examples of events include network events, timers, and user-generated events such as clicks, mouse moves, keyboard presses, and so on. For this reason, we’ll thoroughly explore the mechanisms behind events in chapter 13. We’ll pay special attention to timers, which are frequently a mystery but let us tackle complex coding tasks such as long-running computations and smooth animations.
Browser API— To help us interact with the world, the browser offers an API that allows us to access information about devices, store data locally, or communicate with remote servers. We’ll explore some of these APIs throughout the book.
Perfecting your JavaScript programming skills and achieving deep understanding of APIs offered by the browser will take you far. But sooner, rather than later, you’ll run face first into the browsers and their various issues and inconsistencies. In a perfect world, all browsers would be bug-free and would support web standards in a consistent fashion; unfortunately, we don’t live in that world.
The quality of browsers has improved greatly as of late, but they all still have some bugs, missing APIs, and browser-specific quirks that we need to deal with. Developing a comprehensive strategy for tackling these browser issues, and becoming intimately familiar with their differences and quirks, can be almost as important as proficiency in JavaScript itself.
When we’re writing browser applications or JavaScript libraries to be used in them, choosing which browsers to support is an important consideration. We’d like to support them all, but limitations on development and testing resources dictate otherwise. For this reason, we’ll thoroughly explore strategies for cross-browser development in chapter 14.
Developing effective, cross-browser code can depend significantly on the skill and experience of the developers. This book is intended to boost that skill level, so let’s get to it by looking at current best practices.
