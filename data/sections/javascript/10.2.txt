10.2. A regular expression refresher
Much as we’d like to, we can’t offer you an exhaustive tutorial on regular expressions in the space we have. After all, entire books have been dedicated to regular expressions. But we’ll do our best to hit all the important points.
For more detail than we can offer in this chapter, the books Mastering Regular Expressions by Jeffrey E. F. Friedl, Introducing Regular Expressions by Michael Fitzgerald, and Regular Expressions Cookbook by Jan Goyvaerts and Steven Levithan, all from O’Reilly, are popular choices.
Let’s dig in.
10.2.1. Regular expressions explained
The term regular expression stems from mid-century mathematics, when a mathematician named Stephen Kleene described models of computational automata as “regular sets.” But that won’t help us understand anything about regular expressions, so let’s simplify things and say that a regular expression is a way to express a pattern for matching strings of text. The expression itself consists of terms and operators that allow us to define these patterns. We’ll see what those terms and operators consist of shortly.
In JavaScript, as with most other object types, we have two ways to create a regular expression:
Via a regular expression literal
By constructing an instance of a RegExp object
For example, if we want to create a mundane regular expression (or regex, for short) that matches the string test exactly, we could do so with a regex literal:
const pattern = /test/;
That might look strange, but regex literals are delimited with forward slashes in the same way that string literals are delimited with quote characters.
Alternatively, we could construct a RegExp instance, passing the regex as a string:
const pattern = new RegExp("test");
Both formats result in the same regex being created in the variable pattern.
Tip
The literal syntax is preferred when the regex is known at development time, and the constructor approach is used when the regex is constructed at runtime by building it up dynamically in a string.
One of the reasons that the literal syntax is preferred over expressing regexes in a string is that (as you’ll soon see) the backslash character plays an important part in regular expressions. But the backslash character is also the escape character for string literals, so to express a backslash within a string literal, we need to use a double backslash (\\). This can make regular expressions, which already possess a cryptic syntax, even more odd-looking when expressed within strings.
In addition to the expression itself, five flags can be associated with a regex:
i—Makes the regex case-insensitive, so /test/i matches not only test, but also Test, TEST, tEsT, and so on.
g—Matches all instances of the pattern, as opposed to the default of local, which matches only the first occurrence. More on this later.
m—Allows matches across multiple lines, as might be obtained from the value of a textarea element.
y—Enables sticky matching. A regular expression performs sticky matching in the target string by attempting to match from the last match position.
u—Enables the use of Unicode point escapes (\u{...}).
These flags are appended to the end of the literal (for example, /test/ig) or passed in a string as the second parameter to the RegExp constructor (new RegExp("test", "ig")).
Matching the exact string test (even in a case-insensitive manner) isn’t interesting—after all, we can do that particular check with a simple string comparison. So let’s take a look at the terms and operators that give regular expressions their immense power to match more compelling patterns.
10.2.2. Terms and operators
Regular expressions, like most other expressions we’re familiar with, are made up of terms and operators that qualify those terms. In the sections that follow, you’ll see how these terms and operators can be used to express patterns.
Exact matching
Any character that’s not a special character or operator (which we’ll introduce as we go along) must appear literally in the expression. For example, in our /test/ regex, four terms represent characters that must appear literally in a string for it to match the expressed pattern.
Placing such characters one after the other implicitly denotes an operation that means followed by. So /test/ means t followed by e followed by s followed by t.
Matching from a class of characters
Many times, we won’t want to match a specific literal character, but a character from a finite set of characters. We can specify this with the set operator (also called the character class operator) by placing the set of characters that we want to match in square brackets: [abc].
The preceding example signifies that we want to match any of the characters a, b, or c. Note that even though this expression spans five characters (three letters and two brackets), it matches only a single character in the candidate string.
Other times, we want to match anything but a finite set of characters. We can specify this by placing a caret character (^) right after the opening bracket of the set operator:
[^abc]
This changes the meaning to any character but a, b, or c.
There’s one more invaluable variation to the set operation: the ability to specify a range of values. For example, if we want to match any one of the lowercase characters between a and m, we could write [abcdefghijklm]. But we can express that much more succinctly as follows:
[a-m]
The dash indicates that all characters from a through m inclusive (and lexicographically) are included in the set.
Escaping
Not all characters represent their literal equivalent. Certainly all of the alphabetic and decimal digit characters represent themselves, but as you’ll see, special characters such as $ and the period (.) represent either matches to something other than themselves, or operators that qualify the preceding term. In fact, you’ve already seen how the [, ], -, and ^ characters are used to represent something other than their literal selves.
How do we specify that we want to match a literal [ or $ or ^ or other special character? Within a regex, the backslash character escapes whatever character follows it, making it a literal match term. So \[ specifies a literal match to the [ character, rather than the opening of a character class expression. A double backslash (\\) matches a single backslash.
Begins and ends
Frequently, we may want to ensure that a pattern matches at the beginning of a string, or perhaps at the end of a string. The caret character, when used as the first character of the regex, anchors the match at the beginning of the string, such that /^test/ matches only if the substring test appears at the beginning of the string being matched. (Note that this is an overload of the ^ character, because it’s also used to negate a character class set.)
Similarly, the dollar sign ($) signifies that the pattern must appear at the end of the string:
/test$/
Using both ^ and $ indicates that the specified pattern must encompass the entire candidate string:
/^test$/
Repeated occurrences
If we want to match a series of four a characters, we might express that with /aaaa/, but what if we want to match any number of the same character? Regular expressions enable us to specify several repetition options:
To specify that a character is optional (it can appear either once or not at all), follow it with ?. For example, /t?est/ matches both test and est.
To specify that a character should appear one or many times, use +, as in /t+est/, which matches test, ttest, and tttest, but not est.
To specify that the character appears zero, one, or many times, use *, as in /t*est/, which matches test, ttest, tttest, and est.
To specify a fixed number of repetitions, indicate the number of allowed repetitions between braces. For example, /a{4}/ indicates a match on four consecutive a characters.
To specify a range for the repetition count, indicate the range with a comma separator. For example, /a{4,10}/ matches any string of 4 through 10 consecutive a characters.
To specify an open-ended range, omit the second value in the range (but leave the comma). The regex /a{4,}/ matches any string of four or more consecutive a characters.
Any of these repetition operators can be greedy or nongreedy. By default, they’re greedy: They will consume all the possible characters that make up a match. Annotating the operator with a ? character (an overload of the ? operator), as in a+?, makes the operation nongreedy: It will consume only enough characters to make a match.
For example, if we’re matching against the string aaa, the regular expression /a+/ would match all three a characters, whereas the nongreedy expression /a+?/ would match only one a character, because a single a character is all that’s needed to satisfy the a+ term.
Predefined character classes
Some characters that we might want to match are impossible to specify with literal characters (for example, control characters such as a carriage return). In addition, often we might want to match character classes, such as a set of decimal digits, or a set of whitespace characters. The regular expression syntax provides predefined terms that represent these characters or commonly used classes so that we can use control-character matching in our regular expressions and don’t need to resort to the character class operator for commonly used sets of characters.
Table 10.1 lists these terms and the character or set they represent. These predefined sets help keep our regular expressions from looking excessively cryptic.
Table 10.1. Predefined character classes and character terms
Predefined term
Matches
\t
Horizontal tab
\b
Backspace
\v
Vertical tab
\f
Form feed
\r
Carriage return
\n
Newline
\cA : \cZ
Control characters
\u0000 : \uFFFF
Unicode hexadecimal
\x00 : \xFF
ASCII hexadecimal
.
Any character, except for whitespace characters (\s)
\d
Any decimal digit; equivalent to [0-9]
\D
Any character but a decimal digit; equivalent to [^0-9]
\w
Any alphanumeric character including underscore; equivalent to [A-Za-z0-9_]
\W
Any character but alphanumeric and underscore characters; equivalent to [^A-Za-z0-9_]
\s
Any whitespace character (space, tab, form feed, and so on)
\S
Any character but a whitespace character
\b
A word boundary
\B
Not a word boundary (inside a word)
Grouping
So far, you’ve seen that operators (such as + and *) affect only the preceding term. If we want to apply the operator to a group of terms, we can use parentheses for groups, just as in a mathematical expression. For example, /(ab)+/ matches one or more consecutive occurrences of the substring ab.
When a part of a regex is grouped with parentheses, it serves double duty, also creating what’s known as a capture. There’s a lot to captures, and we discuss them in more depth in section 10.4.
Alternation (or)
Alternatives can be expressed using the pipe (|) character. For example: /a|b/ matches either the a or b character, and /(ab)+|(cd)+/ matches one or more occurrences of either ab or cd.
Backreferences
The most complex terms we can express in regular expressions are backreferences to captures defined in the regex. We address captures at length in section 10.4, but for now just think of them as the portions of a candidate string that are successfully matched against terms in the regular expression. The notation for such a term is the backslash followed by the number of the capture to be referenced, beginning with 1, such as \1, \2, and so on.
An example is /^([dtn])a\1/, which matches a string that starts with any of the d, t, or n characters, followed by an a, followed by whatever character matches the first capture. This latter point is important! This isn’t the same as /[dtn] a[dtn]/. The character following the a can’t be any of d, or t, or n, but must be whichever one of those triggers the match for the first character. As such, which character the \1 will match can’t be known until evaluation time.
A good example of where this might be useful is in matching XML-type markup elements. Consider the following regex:
/<(\w+)>(.+)<\/\1>/
This allows us to match simple elements such as <strong>whatever</strong>. Without the ability to specify a backreference, this wouldn’t be possible, because we’d have no way to know what closing tag would match the opening tag ahead of time.
Tip
That was kind of a whirlwind crash course on regular expressions. If they’re still making you pull your hair out and you find yourself bogged down in the material that follows, we strongly recommend using one of the resources mentioned earlier in this chapter.
Now that you have a handle on regular expressions, you’re ready to look at how to use them wisely in your code.
