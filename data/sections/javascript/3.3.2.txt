3.3.2. Arrow functions
Note
Arrow functions are an ES6 addition to the JavaScript standard (for browser compatibility, see http://mng.bz/8bnH).
Because in our JavaScript we use a lot of functions, it makes sense to add some syntactic sugar that enables us to create functions in a shorter, more succinct way, thus making our lives as developers more pleasant.
In a lot of ways, arrow functions are a simplification of function expressions. Let’s revisit our sorting example from the first section of this chapter:
var values = [0, 3, 2, 5, 7, 4, 8, 1];
values.sort(function(value1,value2){
return value1 – value2;
});
This example uses a callback function expression sent to the sort method of the array object; this callback will be invoked by the JavaScript engine to sort the values of the array in descending order.
Now let’s see how to do the exact same thing with arrow functions:
var values = [0, 3, 2, 5, 7, 4, 8, 1];
values.sort((value1,value2) => value1 – value2);
See how much more succinct this is?
There’s no clutter caused by the function keyword, the braces, or the return statement. In a much simpler way than a function expression can, the arrow function states: here’s a function that takes two arguments and returns their difference. Notice the introduction of a new operator, =>, the so-called fat-arrow operator (an equals sign immediately followed by a greater-than sign), that’s at the core of defining an arrow function.
Now let’s deconstruct the syntax of an arrow function, starting with the simplest possible way:
param => expression
This arrow function takes a parameter and returns the value of an expression. We can use this syntax as shown in the following listing.
Listing 3.6. Comparing an arrow function and a function expression
var greet = name => "Greetings " + name;
#A
assert(greet("Oishi") === "Greetings Oishi", "Oishi is properly greeted");
var anotherGreet = function(name){
#B
return "Greetings " + name;
#B
};
#B
assert(anotherGreet("Oishi") === "Greetings Oishi",
"Again, Oishi is properly greeted");
#A - Defines an arrow function
#B - Defines a function expression
!@%STYLE%@!
{"css":"{\"css\": \"font-weight: bold;\"}","target":"[[{\"line\":0,\"ch\":12},{\"line\":0,\"ch\":39}]]"}
!@%STYLE%@!
Take a while to appreciate how arrow functions make code more succinct, without sacrificing clarity. That’s the simplest version of the arrow function syntax, but in general, the arrow function can be defined in two ways, as shown in figure 3.6.
Figure 3.6. The syntax of an arrow function
As you can see, the arrow function definition starts with an optional comma-separated list of parameter names. If there are no parameters, or more than one parameter, this list must be enclosed within parentheses. But if we have only a single parameter, the parentheses are optional. This list of parameters is followed by a mandatory fat-arrow operator, which tells us and the JavaScript engine that we’re dealing with an arrow function.
After the fat-arrow operator, we have two options. If it’s a simple function, we put an expression there (a mathematical operation, another function invocation, whatever), and the result of the function invocation will be the value of that expression. For instance, our first arrow function example has the following arrow function:
var greet = name => "Greetings " + name;
The return value of the function is a concatenation of the string “Greetings” with the value of the name parameter.
In other cases, when our arrow functions aren’t that simple and require more code, we can include a block of code after the arrow operator. For example:
var greet = name => {
var helloString = 'Greetings ';
return helloString + name;
};
In this case, the return value of the arrow function behaves as in a standard function. If there’s no return statement, the result of the function invocation will be undefined, and if there is, the result will be the value of the return expression.
We’ll revisit arrow functions multiple times throughout this book. Among other things, we’ll present additional features of arrow functions that will help us evade subtle bugs that can occur with more standard functions.
Arrow functions, like all other functions, can receive arguments in order to use them to perform their task. Let’s see what happens with the values that we pass to a function.
