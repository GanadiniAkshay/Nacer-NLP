3.2.1. Storing functions
In certain cases (for example, when we need to manage collections of callbacks that should be invoked when a certain event occurs), we want to store collections of unique functions. When adding functions to such a collection, a challenge we can face is determining which functions are new to the collection and should be added, and which are already resident and shouldn’t be added. In general, when managing callback collections, we don’t want any duplicates, because a single event would result in multiple calls to the same callback.
An obvious, but naïve, technique is to store all the functions in an array and loop through the array, checking for duplicate functions. Unfortunately, this performs poorly, and as a ninja, we want to make things work well, not merely work. We can use function properties to achieve this with an appropriate level of sophistication, as shown in the next listing.
Listing 3.2. Storing a collection of unique functions
var store = {
nextId: 1,
#A
cache: {},
#B
add: function(fn) {
#C
if (!fn.id) {
#C
fn.id = this.nextId++;
#C
this.cache[fn.id] = fn;
#C
return true;
#C
}
#C
}
#C
};
function ninja(){}
assert(store.add(ninja),
#D
"Function was safely added.");
#D
assert(!store.add(ninja),
#D
"But it was only added once.");
#D
#A - Keeps track of the next available ID to be assigned
#B - Creates an object to serve as a cache in which we’ll store functions
#C - Adds functions to the cache, but only if they’re unique
#D - Tests that all works as planned
!@%STYLE%@!
{"css":"{\"css\": \"font-weight: bold;\"}","target":"[]"}
!@%STYLE%@!
In this listing, we create an object assigned to the variable store, in which we’ll store a unique set of functions. This object has two data properties: one that stores a next available id value, and one within which we’ll cache the stored functions. Functions are added to this cache via the add() method:
add: function(fn) {
if (!fn.id) {
fn.id = this.nextId++;
this.cache[fn.id] = fn;
return true;
}
...
Within add, we first check to see whether the function has already been added to the collection by looking for the existence of the id property. If the current function has an id property, we assume that the function has already been processed and we ignore it. Otherwise, we assign an id property to the function (incrementing the nextId property along the way) and add the function as a property of the cache, using the id value as the property name. We then return the value true, so that we can tell when the function was added after a call to add().
Running the page in the browser shows that when our tests try to add the ninja() function twice, the function is added only once, as shown in figure 3.3. Chapter 9 shows an even better technique for working with collections of unique items that utilize sets, a new type of object available in ES6.
Figure 3.3. By tacking a property onto a function, we can keep track of it. In that way, we can be sure that our function has been added only once.
Another useful trick to pull out of our sleeves when using function properties is giving a function the ability to modify itself. This technique can be used to remember previously computed values, saving time during future computations.
