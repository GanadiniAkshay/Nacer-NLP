12.1. Injecting HTML into the DOM
In this section, we’ll look at an efficient way to insert HTML into a document at any location, given that HTML as a string. We present this particular technique because it’s frequently used to create highly dynamic web pages in which the user interface is modified as a response to user actions or data incoming from the server. This is particularly useful for the following scenarios:
Injecting arbitrary HTML into a page and manipulating and inserting client-side templates
Retrieving and injecting HTML sent from a server
It can be technically challenging to implement this functionality correctly (especially when compared to building an object-oriented-style DOM construction API, which is certainly easier to implement but requires an extra layer of abstraction than injecting the HTML). Consider this example of creating HTML elements from an HTML string that we can use with jQuery:
$(document.body).append("<div><h1>Greetings</h1><p>Yoshi here</p></div>")
And compare that with an approach that uses only the DOM API:
const h1 = document.createElement("h1");
h1.textContent = "Greetings";
const p = document.createElement("p");
p.textContent = "Yoshi here";
const div = document.createElement("div");
div.appendChild(h1);
div.appendChild(p);
document.body.appendChild(div);
Which one would you rather use?
For these reasons, we’ll implement our own way of doing clean DOM manipulation from scratch. The implementation requires the following steps:
Convert an arbitrary but valid HTML string into a DOM structure.
Inject that DOM structure into any location in the DOM as efficiently as possible.
These steps provide page authors with a smart way to inject HTML into a document. Let’s get started.
12.1.1. Converting HTML to DOM
Converting an HTML string to a DOM structure doesn’t involve a whole lot of magic. In fact, it uses a tool that you’re most likely already familiar with: the innerHTML property of DOM elements.
Using it is a multistep process:
Make sure that the HTML string contains valid HTML code.
Wrap the string in any enclosing markup that’s required by browser rules.
Insert the HTML string, using innerHTML, into a dummy DOM element.
Extract the DOM nodes back out.
The steps aren’t overly complex, but the actual insertion has some gotchas that we’ll need to take into account. Let’s take a look at each step in detail.
Preprocessing the HTML source string
To start, we’ll need to clean up the source HTML to meet our needs. For example, let’s take a look at a skeleton HTML that allows us to choose a ninja (through the option element) and that shows the details of the chosen ninja within a table, details that are intended to be added at a later point:
<option>Yoshi</option>
<option>Kuma</option>
<table/>
This HTML string has two problems. First, the option elements shouldn’t stand on their own. If you follow proper HTML semantics, they should be contained within a select element. Second, even though markup languages usually allow us to self-close childless elements, such as <table/>, in HTML the self-closing works for only a small subset of elements (table not being one of them). Attempting to use that syntax in other cases is likely to cause problems in some browsers.
Let’s start with solving the problem of self-closing elements. To support this feature, we can do a quick preparse on the HTML string to convert elements such as <table/> to <table></table> (which will be handled uniformly in all browsers), as shown in the following listing.
Listing 12.1. Making sure that self-closing elements are interpreted correctly
const tags =
➥ /^(area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|
➥
source|track|wbr)$/i;
#A
function convert(html) {
#B
return html.replace(
➥
/(<(\w+)[^>]*?)\/>/g, (all, front, tag) => {
return tags.test(tag) ? all :
front + "></" + tag + ">";
});
}
assert(convert("<a/>") === "<a></a>", "Check anchor conversion.");
assert(convert("<hr/>") === "<hr/>", "Check hr conversion.");
#A - Uses a regular expression to match the tag name of any elements we don’t need to be concerned about
#B - A function that uses regular expressions to convert self-closing tags to “normal” form
!@%STYLE%@!
{"css":"{\"css\": \"font-weight: bold;\"}","target":"[]"}
!@%STYLE%@!
When we apply the convert function to this example HTML string, we end up with the following HTML string:
<option>Yoshi</option>
<option>Kuma</option>
<table></table>
#A
#A - <table/> expanded
!@%STYLE%@!
{"css":"{\"css\": \"font-weight: bold;\"}","target":"[[{\"line\":4,\"ch\":0},{\"line\":4,\"ch\":22}]]"}
!@%STYLE%@!
With that accomplished, we still have to solve the problem that our option elements aren’t contained within a select element. Let’s see how to determine whether an element needs to be wrapped.
HTML wrapping
According to the semantics of HTML, some HTML elements must be within certain container elements before they can be injected. For example, an <option> element must be contained within a <select>.
We can solve this problem in two ways, both of which require constructing a mapping between problematic elements and their containers:
The string could be injected directly into a specific parent by using innerHTML, where the parent has been previously constructed using the built-in document createElement. Although this may work in some cases and in some browsers, it isn’t universally guaranteed.
The string could be wrapped with the appropriate required markup and then injected directly into any container element (such as a <div>). This is more foolproof, but it’s also more work.
The second technique is preferred; it involves little browser-specific code, in contrast to the first approach, which requires a fair amount of mostly browser-specific code.
The set of problematic elements that need to be wrapped in specific container elements is fortunately a rather manageable seven. In table 12.1, the ellipses (...) indicates the locations where the elements need to be injected.
Table 12.1. Elements that need to be contained within other elements
Element name
Ancestor element
<option>, <optgroup>
<select multiple>...</select>
<legend>
<fieldset>...</fieldset>
<thead>, <tbody>, <tfoot>, <colgroup>, <caption>
<table>...</table>
<tr>
<table><thead>...</thead></table><table><tbody>...</tbody></table><table><tfoot>...</tfoot></table>
<td>, <th>
<table><tbody><tr>...</tr></tbody></table>
<col>
<table> <tbody></tbody> <colgroup>...</colgroup></table>
Nearly all of these are straightforward, save for the following points, which require a bit of explanation:
A <select> element with the multiple attribute is used (as opposed to a nonmultiple select) because it won’t automatically check any of the options that are placed inside it (whereas a single select will autocheck the first option).
The <col> fix includes an extra <tbody>, without which the <colgroup> won’t be generated properly.
With the elements properly mapped to their wrapping requirements, let’s start generating.
With the information from table 12.1, we can generate the HTML that we need to insert into a DOM element, as shown in the following listing.
Listing 12.2. Generating a list of DOM nodes from some markup
function getNodes(htmlString, doc) {
const map = {
#A
"<td":[3,"<table><tbody><tr>","</tr></tbody></table>"],
#A
"<th":[3,"<table><tbody><tr>","</tr></tbody></table>"],
#A
"<tr":[2,"<table><thead>","</thead></table>"],
#A
"<option":[1,"<select multiple>","</select>"],
#A
"<optgroup":[1,"<select multiple>","</select>"],
#A
"<legend":[1,"<fieldset>","</fieldset>"],
#A
"<thead":[1,"<table>","</table>"],
#A
"<tbody":[1,"<table>","</table>"],
#A
"<tfoot":[1,"<table>","</table>"],
#A
"<colgroup":[1,"<table>","</table>"],
#A
"<caption":[1,"<table>","</table>"],
#A
"<col":[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],
};
const tagName = htmlString.match(/<\w+/);
#B
let mapEntry = tagName ? map[tagName[0]] : null;
#B
if (!mapEntry) { mapEntry = [0, " "," " ];}
#C
let div = (doc || document).createElement("div");
#D
div.innerHTML = mapEntry[1] + htmlString + mapEntry[2];
#E
while (mapEntry[0]--) { div = div.lastChild;}
#F
return div.childNodes;
#G
}
assert(getNodes("<td>test</td><td>test2</td>").length === 2,
"Get two nodes back from the method.");
assert(getNodes("<td>test</td>")[0].nodeName === "TD",
"Verify that we're getting the right node.");
#A - Map of element types that need special parent containers. Each entry has the depth of the new node, opening HTML for the parents, and closing HTML for the parents.
#B - Matches the opening bracket and tag name
#C - If it’s in the map, grabs the entry; otherwise, constructs a faux entry with empty “parent” markup and a depth of zero.
#D - Creates a <div> element in which to create the new nodes. Note that we use a passed document if it exists, or default to the current document if not.
#E - Wraps the incoming markup with the parents from the map entry, and injects it as the inner HTML of the newly created <div>
#F - Walks down the just-created tree to the depth indicated by the map entry. This should be the parent of the desired node created from the markup.
#G - Returns the newly created element
!@%STYLE%@!
{"css":"{\"css\": \"font-weight: bold;\"}","target":"[]"}
!@%STYLE%@!
We create a map of all element types that need to be placed within special parent containers, a map that contains the depth of the node, as well as the enclosing HTML. Next, we use a regular expression to match the opening bracket and the tag name of the element we want to insert:
const tagName = htmlString.match(/<\w+/);
Then we select a map entry, and in case there isn’t one, we create a dummy entry with an empty parent element markup:
let mapEntry = tagName ? map[tagName[0]] : null;
if
(!mapEntry) { mapEntry = [0, " ", " "]; }
We follow this by creating a new div element, surrounding it with the mapped HTML, and inserting the newly created HTML into the previously created div element:
let div = (doc || document).createElement("div");
div.innerHTML = mapEntry[1] + htmlString + mapEntry[2]
Finally, we find the parent of the desired node created from our HTML string, and we return the newly created node:
while (mapEntry[0]--) { div = div.lastChild;}
return div.childNodes;
After all of this, we have a set of DOM nodes that we can begin to insert into the document.
If we go back to our motivating example, and apply the getNodes function, we’ll end up with something along the following lines:
<select multiple>
#A
<option>Yoshi</option>
#A
<option>Kuma</option>
#A
</select>
#A
<table></table>
#A - Option elements have been wrapped inside a select element.
!@%STYLE%@!
{"css":"{\"css\": \"font-weight: bold;\"}","target":"[[{\"line\":6,\"ch\":0},{\"line\":6,\"ch\":63}]]"}
!@%STYLE%@!
12.1.2. Inserting elements into the document
After we have the DOM nodes, it’s time to insert them into the document. A couple of steps are required, and we’ll work through them in this section.
Because we have an array of elements that we need to insert—potentially into any number of locations within the document—we want to try to keep the number of operations performed to a minimum. We can do this by using DOM fragments. DOM fragments are part of the W3C DOM specification and are supported in all browsers. This useful facility gives us a container to hold a collection of DOM nodes.
This in itself is quite useful, but it also has the advantage that the fragment can be injected and cloned in a single operation instead of having to inject and clone each individual node over and over again. This has the potential to dramatically reduce the number of operations required for a page.
Before we use this mechanism in our code, let’s revisit the getNodes() code of listing 12.2 and adjust it a tad to use DOM fragments. The changes are minor and consist of adding a fragment parameter to the function’s parameter list, as follows.
Listing 12.3. Expanding the getNodes function with fragments
function getNodes(htmlString, doc, fragment){
#A
const map = {
"<td":[3,"<table><tbody><tr>","</tr></tbody></table>"],
"<th":[3,"<table><tbody><tr>","</tr></tbody></table>"],
"<tr":[2,"<table><thead>","</thead></table>"],
"<option":[1,"<select multiple>","</select>"],
"<optgroup":[1,"<select multiple>","</select>"],
"<legend":[1,"<fieldset>","</fieldset>"],
"<thead":[1,"<table>","</table>"],
"<tbody":[1,"<table>","</table>"],
"<tfoot":[1,"<table>","</table>"],
"<colgroup":[1,"<table>","</table>"],
"<caption":[1,"<table>","</table>"],
"<col":[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],
};
const tagName = htmlString.match(/<\w+/);
let mapEntry = tagName ? map[tagName[0]] : null;
if
(!mapEntry) { mapEntry = [0, " "," " ];}
let div = (doc || document).createElement("div");
div.innerHTML = mapEntry[1] + htmlString + mapEntry[2];
while (mapEntry[0]--) { div = div.lastChild;}
if (fragment) {
#B
while (div.firstChild) {
#B
fragment.appendChild(div.firstChild);
#B
}
#B
}
#B
return div.childNodes;
}
#A - Adds a new fragment parameter to the function
#B - If the fragment exists, injects the nodes into it.
!@%STYLE%@!
{"css":"{\"css\": \"font-weight: bold;\"}","target":"[[{\"line\":0,\"ch\":33},{\"line\":0,\"ch\":43}]]"}
!@%STYLE%@!
In this example, we make a couple of changes. First we modify the function signature by adding another parameter, fragment:
function getNodes(htmlString, doc, fragment) {...}
This parameter, if it’s passed, is expected to be a DOM fragment that we want the nodes to be injected into for later use.
To do so, we add the following fragment just before the return statement of the function to add the nodes to the passed fragment:
if (fragment) {
while (div.firstChild) {
fragment.appendChild(div.firstChild);
}
}
Now, let’s see it in use. In the following listing, which assumes that the updated getNodes function is in scope, a fragment is created and passed in to that function (which, you may recall, converts the incoming HTML string into DOM elements). This DOM is now appended to the fragment.
Listing 12.4. Inserting a DOM fragment into multiple locations in the DOM
<div id="test"><b>Hello</b>, I'm a ninja!</div>
#A
<div id="test2"></div>
#A
<script>
document.addEventListener("DOMContentLoaded", () => {
function insert(elems, args, callback) {
if (elems.length) {
const doc = elems[0].ownerDocument || elems[0],
fragment = doc.createDocumentFragment(),
#B
scripts = getNodes(args, doc, fragment),
#C
first = fragment.firstChild;
if (first) {
for (let i = 0; elems[i]; i++) {
callback.call(root(elems[i], first),
i > 0 ? fragment.cloneNode(true) : fragment);
#D
}
}
}
}
const divs = document.querySelectorAll("div");
insert(divs, "<b>Name:</b>", function (fragment) {
this.appendChild(fragment);
});
insert(divs, "<span>First</span> <span>Last</span>",
function (fragment) {
this.parentNode.insertBefore(fragment, this);
});
});
</script>
#A - Sets up a couple of test nodes
#B - Creates a document fragment in which we’ll insert nodes
#C - Creates HTML nodes from the HTML string
#D - If we need to insert the nodes into more than one element, we have to clone the fragment each time.
!@%STYLE%@!
{"css":"{\"css\": \"font-weight: bold;\"}","target":"[]"}
!@%STYLE%@!
There’s another important point here: If we’re inserting this element into more than one location in the document, we’re going to need to clone this fragment again and again. If we weren’t using a fragment, we’d have to clone each individual node every time, instead of the whole fragment at once.
With this, we’ve developed a way to generate and insert arbitrary DOM elements in an intuitive manner. Let’s continue this exploration of the DOM by seeing the difference between DOM attributes and properties.
