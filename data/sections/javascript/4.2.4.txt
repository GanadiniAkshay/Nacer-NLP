4.2.4. Invocation with the apply and call methods
So far, you’ve seen that one of the major differences between the types of function invocation is what object ends up as the function context referenced by the implicit this parameter that’s passed to the executing function. For methods, it’s the method’s owning object; for top-level functions, it’s either window or undefined (depending on the current strictness); for constructors, it’s a newly created object instance.
But what if we want to make the function context whatever we want? What if we want to set it explicitly? What if...well, why would we want to do such a thing?
To get a glimpse of why we’d care about this ability, we’ll look at a practical example that illustrates a surprisingly common bug related to event handling. For now, consider that when an event handler is called, the function context is set to the object to which the event was bound. (Don’t worry if this seems vague; you’ll learn about event handling in great detail in chapter 13.) Take a look at the following listing.
Listing 4.10. Binding a specific context to a function
<button id="test">Click Me!</button>
#A
<script>
function Button(){
#B
this.clicked = false;
this.click = function(){
#C
this.clicked = true;
assert(button.clicked, "The button has been clicked");
#D
};
}
var button = new Button();
#E
var elem = document.getElementById("test");
#F
elem.addEventListener("click", button.click);
#F
</script>
#A - A button element to which we’ll assign an event handler
#B - A constructor function that creates objects that retain state regarding our button. With it, we’ll track whether the button has been clicked.
#C - Declares the method that we’ll use as the click handler. Because it’s a method of the object, we use this within the function to get a reference to the object.
#D - Within the method, we test that the button state has been correctly changed after a click.
#E - Creates an instance that will track whether the button was clicked
#F - Establishes the click handler on the button
!@%STYLE%@!
{"css":"{\"css\": \"font-weight: bold;\"}","target":"[]"}
!@%STYLE%@!
In this example, we have a button, <button id="test">Click Me!</button>, and we want to know whether it has ever been clicked. To retain that state information, we use a constructor function to create a backing object named button, in which we’ll store the clicked state:
function Button(){
this.clicked = false;
this.click = function(){
this.clicked = true;
assert(button.clicked, "The button has been clicked");
};
}
var button = new Button();
In that object, we also define a click method that will serve as an event handler that fires when the button is clicked. The method sets the clicked property to true and then tests that the state was properly recorded in the backing object (we’ve intentionally used the button identifier instead of the this keyword—after all, they should refer to the same thing, or should they?). Finally, we establish the button.click method as a click handler for the button:
var elem = document.getElementById("test");
elem.addEventListener("click", button.click);
When we load the example into a browser and click the button, we see by the display of figure 4.2 that something is amiss; the stricken text indicates that the test has failed. The code in listing 4.10 fails because the context of the click function isn’t referring to the button object as we intended.
Figure 4.2. Why did our test fail? Where did the change of state go? Usually, the event callback’s context is the object raising the event (in this case, the HTML button, and not the button object).
Recalling the lessons of earlier in the chapter, if we had called the function via button.click(), the context would have been the button, because the function would be invoked as a method on the button object. But in this example, the event-handling system of the browser defines the context of the invocation to be the target element of the event, which causes the context to be the <button> element, not the button object. So we set our click state on the wrong object!
This is a surprisingly common problem, and later in the chapter, you’ll see techniques for completely evading it. For now, let’s explore how to tackle it by examining how to explicitly set the function context by using the apply and call methods.
Using the apply and call methods
JavaScript provides a means for us to invoke a function and to explicitly specify any object we want as the function context. We do this through the use of one of two methods that exist for every function: apply and call.
Yes, we said methods of functions. As first-class objects (created, by the way, by the built-in Function constructor), functions can have properties just like any other object type, including methods.
To invoke a function by using its apply method, we pass two parameters to apply: the object to be used as the function context, and an array of values to be used as the invocation arguments. The call method is used in a similar manner, except that the arguments are passed directly in the argument list rather than as an array.
The following listing shows both of these methods in action.
Listing 4.11. Using the apply and call methods to supply the function context
function juggle() {
#A
var result = 0;
#A
for (var n = 0; n < arguments.length; n++) {
#A
result += arguments[n];
#A
}
#A
this.result = result;
#A
}
#A
var ninja1 = {};
#B
var ninja2 = {};
#B
juggle.apply(ninja1,[1,2,3,4]);
#C
juggle.call(ninja2, 5,6,7,8);
#D
assert(ninja1.result === 10, "juggled via apply");
#E
assert(ninja2.result === 26, "juggled via call");
#E
#A - The function “juggles” the arguments and puts the result onto whatever object is the function context.
#B - These objects are initially empty and will serve as our test subjects.
#C - Uses the apply method, passing ninja1 and an array of arguments
#D - Uses the call method, passing ninja2 and a list of arguments
#E - The tests show how the juggle result is placed on the objects passed to the methods.
!@%STYLE%@!
{"css":"{\"css\": \"font-weight: bold;\"}","target":"[]"}
!@%STYLE%@!
In this example, we set up a function named juggle, in which we define juggling as adding up all the arguments and storing them as a property named result on the function context (referenced by the this keyword). That may be a rather lame definition of juggling, but it will allow us to determine whether arguments were passed to the function correctly, and which object ended up as the function context.
We then set up two objects, ninja1 and ninja2, that we’ll use as function contexts, passing the first to the function’s apply method, along with an array of arguments, and passing the second to the function’s call method, along with a list of other arguments:
juggle.apply(ninja1,[1,2,3,4]);
juggle.call(ninja2, 5,6,7,8);
Notice that the only difference between apply and call is how the arguments are supplied. In the case of apply, we use an array of arguments, and in the case of call, we list them as call arguments, after the function context. See figure 4.3.
Figure 4.3. As the first argument, both the call and apply methods take the object that will be used as the function context. The difference is in the following arguments. apply takes only one additional argument, an array of argument values; call takes any number of arguments, which will be used as function arguments.
After we’ve supplied our function contexts and arguments, we continue by testing! First, we check that ninja1, which was called via apply, received a result property that’s the result of adding up all the argument values (1, 2, 3, 4) in the passed array. Then we do the same for ninja2, which was called via call, where we check the result for arguments 5, 6, 7, and 8:
assert(ninja1.result === 10, "juggled via apply");
assert(ninja2.result === 26, "juggled via call");
Figure 4.4 provides a closer look at what’s going on in listing 4.11.
Figure 4.4. Manually setting a function context by using built-in call and apply from listing 4.11 results in these combinations of function contexts (the this parameter) and arguments.
These two methods, call and apply, can come in handy whenever it’s expedient to usurp what would normally be the function context with an object of our own choosing—something that can be particularly useful when invoking callback functions.
Forcing the function context in callbacks
Let’s consider a concrete example of forcing the function context to be an object of our own choosing. We’ll use a simple function to perform an operation on every entry of an array.
In imperative programming, it’s common to pass the array to a method and use a for loop to iterate over every entry, performing the operation on each entry:
function(collection) {
for (var n = 0; n < collection.length; n++) {
/* do something to collection[n] */
}
}
In contrast, the functional approach is to create a function that operates on a single element and passes each entry to that function:
function(item){
/* do something to item */
}
The difference lies in thinking at a level where functions are the main building blocks of the program. You might think that it’s moot, and that all you’re doing is moving the for loop out one level, but we’re not done massaging this example yet.
To facilitate a more functional style, all array objects have access to a forEach function that invokes a callback on each element within an array. This is often more succinct, and this style is preferred over the traditional for statement by those familiar with functional programming. Its organizational benefits will become even more evident (cough, code reuse, cough) after covering closures in chapter 5. Such an iteration function could pass the current element to the callback as a parameter, but most make the current element the function context of the callback.
Even though all modern JavaScript engines now support a forEach method on arrays, we’ll build our own (simplified) version of such a function in the next listing.
Listing 4.12. Building a forEach function to demonstrate setting a function context
function forEach(list, callback) {
#A
for (var n = 0; n < list.length; n++) {
callback.call(list[n], n);
#B
}
}
var weapons = [ { type: 'shuriken' },
{ type: 'katana' },
{ type:'nunchucks' }];
#C
forEach(weapons, function(index){
#D
assert(this === weapons[index],
#D
"Got the expected value of " + weapons[index].type);
#D
});
#D
#A - Our iteration function accepts the collection to be iterated over and a callback function.
#B - The callback is invoked such that the current iteration item is the function context.
#C - Our test subject
#D - Calls the iteration function and ensures that the function context is correct for each invocation of the callback
!@%STYLE%@!
{"css":"{\"css\": \"font-weight: bold;\"}","target":"[]"}
!@%STYLE%@!
The iteration function sports a simple signature that expects the array of objects to be iterated over as the first argument, and a callback function as the second. The function iterates over the array entries, invoking the callback function for each entry:
function forEach(list,callback) {
for (var n = 0; n < list.length; n++) {
callback.call(list[n], n);
}
}
We use the call method of the callback function, passing the current iteration entry as the first parameter and the loop index as the second. This should cause the current entry to become the function context, and the index to be passed as the single parameter to the callback.
Now to test that! We set up a simple weapons array. Then we call the forEach function, passing the test array and a callback within which we test that the expected entry is set as the function context for each invocation of the callback:
forEach(weapons, function(index){
assert(this === weapons[index],
"Got the expected value of " + weapons[index].type);
});
Figure 4.5 shows that our function works splendidly.
Figure 4.5. The test results show that we have the ability to make any object we please the function context of a callback invocation.
In a production-ready implementation of such a function, there’d be a lot more work to do. For example, what if the first argument isn’t an array? What if the second argument isn’t a function? How would you allow the page author to terminate the loop at any point? As an exercise, you can augment the function to handle these situations. Another exercise you could task yourself with is to enhance the function so that the page author can pass an arbitrary number of arguments to the callback in addition to the iteration index.
Given that apply and call do pretty much the same thing, here’s something you might be asking yourself at this point: How do we decide which to use? The high-level answer is the same as for many such questions: We use whichever one improves code clarity. A more practical answer is to use the one that best matches the arguments we have handy. If we have a bunch of unrelated values in variables or specified as literals, call lets us list them directly in its argument list. But if we already have the argument values in an array, or if it’s convenient to collect them as such, apply could be the better choice.
