1.3.3. Performance analysis
Another important practice is performance analysis. The JavaScript engines have made astounding strides in the performance of JavaScript, but that’s no excuse for writing sloppy and inefficient code.
We’ll use code such as the following later in this book to collect performance information:
console.time("My operation");
#A
for(var n = 0; n < maxCount; n++){
#B
/*perform the operation to be measured*/
#B
}
#B
console.timeEnd("My operation");
#C
#A - Starts the timer
#B - Performs the operation multiple times
#C - Stops the timer
!@%STYLE%@!
{"css":"{\"css\": \"font-weight: bold;\"}","target":"[[{\"line\":2,\"ch\":19},{\"line\":2,\"ch\":27}],[{\"line\":8,\"ch\":0},{\"line\":8,\"ch\":21}]]"}
!@%STYLE%@!
Here, we bracket the execution of the code to be measured with two calls to the time and timeEnd methods of the built-in console object.
Before the operation begins executing, the call to console.time starts a timer with a name (in this case, My operation). Then we run the code in the for loop a certain number of times (in this case, maxCount times). Because a single operation of the code happens much too quickly to measure reliably, we need to perform the code many times to get a measurable value. Frequently, this count can be in the tens of thousands, or even millions, depending on the nature of the code being measured. A little trial and error lets us choose a reasonable value.
When the operation ends, we call the console.timeEnd method with the same name. This causes the browser to output the time that elapsed since the timer was started.
These best-practice techniques, along with others you’ll learn along the way, will greatly enhance your JavaScript development. Developing applications with the restricted resources that a browser provides, coupled with the increasingly complex world of browser capability and compatibility, requires a robust and complete set of skills.
