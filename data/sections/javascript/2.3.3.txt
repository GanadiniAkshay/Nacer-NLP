2.3.3. Handling events
The main idea behind event handling is that when an event occurs, the browser calls the associated event handler. As we’ve already mentioned, due to the single-threaded execution model, only a single event handler can be executed at once. Any following events are processed only after the execution of the current event handler is fully complete!
Let’s go back to the application from listing 2.1. Figure 2.9 shows an example execution in which a quick user has moved and clicked a mouse.
Figure 2.9. Example of an event-handling phase in which two events—mousemove and click—are handled
Let’s examine what’s going on here. As a response to these user actions, the browser puts the mousemove and click events onto the event queue in the order in which they have occurred: first the mousemove event and then the click event .
In the event-handling phase, the event loop then checks the queue, sees that there’s a mousemove event at the front of the queue, and executes the associated event handler . While the mousemove handler is being processed, the click event waits in the queue for its turn. When the last line of the mousemove handler function has finished executing and the JavaScript engine exits the handler function, the mousemove event is fully processed , and the event loop again checks the queue. This time, at the front of the queue, the event loop finds the click event and processes it. Once the click handler has finished executing, there are no new events in the queue, and the event loop keeps looping, waiting for new events to handle. This loop will continue executing until the user closes the web application.
Now that we have a sense of the overall steps that happen in the event-handling phase, let’s see how this execution influences the DOM (figure 2.10). The execution of the mousemove handler selects the second list element with ID second and, by using the addMessage function, adds a new list item element
with the text "Event: mousemove". Once the execution of the mousemove handler is finished, the event loop executes the click handler, which leads to the creation of another list item element , which is also appended to the second list element with the ID second.
Figure 2.10. The DOM of the example application after handling the mousemove and click events
Armed with this solid understanding of the lifecycle of client-side web applications, in the next part of the book, we’ll start focusing on JavaScript the language, by learning the ins and outs of functions.
