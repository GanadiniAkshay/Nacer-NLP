7.2.1. Instance properties
When the function is called as a constructor via the new operator, its context is defined as the new object instance. In addition to exposing properties via the prototype, we can initialize values within the constructor function via the this parameter. Let’s examine the creation of such instance properties in the next listing.
Listing 7.3. Observing the precedence of initialization activities
function Ninja(){
this.swung = false;
#A
this.swingSword = function(){
#B
return !this.swung;
#B
};
}
Ninja.prototype.swingSword = function(){
#C
return this.swung;
#C
};
#C
const ninja = new Ninja();
#D
assert(ninja.swingSword(),
#D
"Called the instance method, not the prototype method.");
#D
#A - Creates an instance variable that holds a Boolean value initialized to false
#B - Creates an instance method that returns the inverse of the swung instance variable value
#C - Defines a prototype method with the same name as the instance method. Which will take precedence?
#D - Constructs a Ninja instance and asserts that the instance method will override the prototype method of the same name
!@%STYLE%@!
{"css":"{\"css\": \"font-weight: bold;\"}","target":"[]"}
!@%STYLE%@!
Listing 7.3 is similar to the previous example in that we define a swingSword method by adding it to the prototype property of the constructor:
Ninja.prototype.swingSword = function(){
return this.swung;
};
But we also add an identically named method within the constructor function itself:
function Ninja(){
this.swung = false;
this.swingSword = function(){
return !this.swung;
};
}
The two methods are defined to return opposing results so we can tell which will be called.
Note
This isn’t anything we’d advise doing in real-world code; quite the opposite. We’re doing it here just to demonstrate the precedence of properties.
When you run the test, you see that it passes! This shows that instance members will hide properties of the same name defined in the prototype. See figure 7.5.
Figure 7.5. If a property can be found on the instance itself, the prototype isn’t even consulted!
Within the constructor function, the this keyword refers to the newly created object, so the properties added within the constructor are created directly on the new ninja instance. Later, when we access the property swingSword on ninja, there’s no need to traverse the prototype chain (as shown in figure 7.4); the property created within the constructor is immediately found and returned (see figure 7.5).
This has an interesting side effect. Take a look at figure 7.6, which shows the state of the application if we create three ninja instances.
Figure 7.6. Every instance gets its own version of the properties created within the constructor, but they all have access to the same prototype’s properties.
As you can see, every ninja instance gets its own version of the properties that were created within the constructor, while they all have access to the same prototype’s properties. This is okay for value properties (for example, swung) that are specific to each object instance. But in certain cases it might be problematic for methods.
In this example, we’d have three versions of the swingSword method that all perform the same logic. This isn’t a problem if we create a couple of objects, but it’s something to pay attention to if we plan to create large numbers of objects. Because each method copy behaves the same, creating multiple copies often doesn’t make sense, because it only consumes more memory. Sure, in general, the JavaScript engine might perform some optimizations, but that’s not something to rely on. From that perspective, it makes sense to place object methods only on the function’s prototype, because in that way we have a single method shared by all object instances.
Note
Remember chapter 5 on closures: Methods defined within constructor functions allow us to mimic private object variables. If this is something we need, specifying methods within constructors is the only way to go.
