4.2. Invoking functions
We’ve all called JavaScript functions, but have you ever stopped to wonder what really happens when a function is called? As it turns out, the manner in which a function is invoked has a huge impact on how the code within it operates, primarily in how the this parameter, the function context, is established. This difference is much more important than it might seem at first. We’ll examine it within this section and exploit it throughout the rest of this book to help elevate our code to the ninja level.
We can invoke a function in four ways, each with its own nuances:
As a function—skulk(), in which the function is invoked in a straightforward manner
As a method—ninja.skulk(), which ties the invocation to an object, enabling object-oriented programming
As a constructor—new Ninja(), in which a new object is brought into being
Via the function’s apply or call methods—skulk.call(ninja)or skulk.apply(ninja)
Here are examples:
function skulk(name) {}
function Ninja(name) {}
skulk('Hattori');
#A
(function(who){ return who; })('Hattori');
#A
var ninja = {
skulk: function(){}
};
ninja.skulk('Hattori');
#B
ninja = new Ninja('Hattori');
#C
skulk.call(ninja, 'Hattori');
#D
skulk.apply(ninja, ['Hattori']);
#E
#A - Invoked as a function
#B - Invoked as a method of ninja
#C - Invoked as a constructor
#D - Invoked via the call method
#E - Invoked via the apply method
!@%STYLE%@!
{"css":"{\"css\": \"font-weight: bold;\"}","target":"[]"}
!@%STYLE%@!
For all but the call and apply approaches, the function invocation operator is a set of parentheses following any expression that evaluates to a function reference.
Let’s start our exploration with the simplest form, invoking functions as functions.
